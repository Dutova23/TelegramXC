#8138545020:AAGlFrjmqLEajeTaoylWAWfhM0NR_R6dB88

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentType
)
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types.input_file import FSInputFile

import pytesseract
from PIL import Image
import asyncio
import os
from aiogram.client.default import DefaultBotProperties
import re 

#—Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
RECEIPT_KEYWORDS = [
    "–∏—Ç–æ–≥–æ", "–∫–∞—Å—Å–∏—Ä", "—Ñ–∏—Å–∫", "–∏–Ω–Ω", "—Ä–Ω–∫", "—Å—É–º–º–∞", "–æ–ø–ª–∞—Ç–∞", "–ø–æ–∫—É–ø–∫–∞", 
    "–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–∞—Å—Å–∏—Ä", "—Ä–µ —Ç—Ä–µ–π–¥–∏–Ω–≥", "re —Ç—Ä–µ–π–¥–∏–Ω–≥", "—Ä–µ —Ç—Ä–µ–π–¥–∏", "re trading", "house", "xc", "—Ö—Å",
    "—Ä–µ —Ç—Ä–µ–π–¥–∏–Ω–≥", "re —Ç—Ä–µ–π–¥–∏–Ω–≥", "—Ä–µ —Ç—Ä–µ–π–¥–∏", "re trading",
    "—Ä–µ —Ç—Ä—ç–π–¥–∏–Ω–≥", "—Ä–µ —Ç—Ä—ç–π–¥–∏", "house", "xc", "—Ö—Å", "–æ–æ–æ —Ä–µ", "–º–∞–≥–∞–∑–∏–Ω house", "–†–ï –¢—Ä–µ–∏–¥–∏–Ω–≥", "–†–ï Tpa–π–¥–∏–Ω–≥"
]


def is_valid_receipt(text: str) -> bool:
    text = text.lower()
    

    keyword_matches = [word for word in RECEIPT_KEYWORDS if word in text]

    has_inn = bool(re.search(r"\b\d{10}\b", text))  # –ò–ù–ù ‚Äî 10 —Ü–∏—Ñ—Ä
    has_date = bool(re.search(r"\d{2}[./-]\d{2}[./-]\d{2,4}", text))  # –¥–∞—Ç–∞
    has_time = bool(re.search(r"\d{2}:\d{2}", text))  # –≤—Ä–µ–º—è

    return (
        len(text.splitlines()) >= 5 and
        (len(keyword_matches) >= 2 or (has_inn and has_date and has_time))
    )


TOKEN = "8138545020:AAGlFrjmqLEajeTaoylWAWfhM0NR_R6dB88"

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"


bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher(storage=MemoryStorage())

user_paths = {}

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø —Å–¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É –≤ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ", callback_data="PRAVDA")],
        [InlineKeyboardButton(text="–Ø —Å–¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É –≤ XC", callback_data="XC")]
    ])
    
    caption = "–ü—Ä–∏–≤–µ—Ç, —è —á–∞—Ç-–±–æ—Ç –∫–æ–ª–ª–∞–±—ã XC –∏ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ. –Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –≤–∞—à–∏ –ø–æ–∫—É–ø–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç –≥–¥–µ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞."

  
    photo = FSInputFile("XC_banner.png")


    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=caption,
        reply_markup=keyboard
    )

@dp.callback_query()
async def handle_callback(call):
    user_id = call.from_user.id
    data = call.data

    user_paths[user_id] = data

    if data == "PRAVDA":
        await bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
    elif data == "XC":
        await bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
    elif data == "has_card":
        await bot.send_message(
    chat_id=user_id,
    text=(
        "<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
        "–∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ‚Äú–ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ‚Äù. –ú—ã –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π üôå\n\n"
        '<a href="https://forms.yandex.ru/u/6800ca3190fa7b0f16cd68a7/">–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã</a>'
    )
)

    elif data == "no_card":
        await bot.send_message(
            chat_id=user_id,
            text=(
                "<b>–ù–µ –ø—Ä–æ–±–ª–µ–º–∞!</b>\n"
        "–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µü´∞:\n\n"
        '<a href="https://pravdacoffee.ru/allnews/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0-%D0%BB%D0%BE%D1%8F%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-2/">–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ</a>'
    )
)


@dp.message(F.content_type == ContentType.PHOTO)
async def handle_receipt_photo(message: Message):
    user_id = message.from_user.id
    brand = user_paths.get(user_id)

    if not brand:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É ‚Äî /start")
        return

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)

   
    import uuid
    filename = f"receipt_{user_id}_{uuid.uuid4().hex}.jpg"
    await bot.download_file(file.file_path, filename)

    image = Image.open(filename)
    text = pytesseract.image_to_string(image, lang="rus")
    os.remove(filename)

    if not is_valid_receipt(text):
        await message.answer("‚ùå –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Å—Å–æ–≤—ã–π —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–∞ —Å—É–º–º–∞, –ò–ù–ù –∏–ª–∏ –¥–∞—Ç–∞.")
        return

    text_lower = text.lower()

    if brand == "PRAVDA":
        if "–ø—Ä–∞–≤–¥–∞" in text_lower:
            promocode = "XC_2025"
            await message.answer(
                f"ü•≥–ß–µ–∫ –æ—Ç –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ –ø—Ä–∏–Ω—è—Ç!\n\nüéÅ –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –•–°: <b>{promocode}</b>\n"
                "–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ –∫–∞—Å—Å–µ!"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–µ–Ω–¥ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ –Ω–∞ —á–µ–∫–µ.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")

    elif brand == "XC":
        if "xc" in text_lower or "—Ä–µ —Ç—Ä—ç–π–¥–∏–Ω–≥" in text_lower:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ", callback_data="has_card")],
                [InlineKeyboardButton(text="‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ", callback_data="no_card")]
            ])
            await message.answer(
                "ü•≥–ß–µ–∫ –æ—Ç –•–° –ø—Ä–∏–Ω—è—Ç!\n\n–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ü—Ä–∞–≤–¥–∞ –ö–æ—Ñ–µ?",
                reply_markup=keyboard
            )

    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–µ–Ω–¥ –•–° –Ω–∞ —á–µ–∫–µ.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞.")




async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

